import React from 'react';
import PropTypes from 'prop-types';
import CodeBlock from '../../../components/CodeBlock';
import { RealWorldExample } from './components/RealWorldExample';
import { MemoryComparison } from './components/MemoryComparison';
import { ImpactMetrics } from './components/ImpactMetrics';

/**
 * Lesson 1: Why Memory in Agents?
 * 
 * This lesson introduces the fundamental concept of memory in AI agents,
 * demonstrating the problems of stateless agents and the benefits of 
 * implementing memory systems.
 * 
 * Learning Objectives:
 * - Understand why memory is crucial for agent functionality
 * - Identify different types of memory systems
 * - Recognize real-world applications and benefits
 * 
 * @param {Object} props - Component props
 * @param {Function} props.onComplete - Callback when lesson is completed
 */
const MemoryIntroLesson = ({ onComplete }) => {
  const withoutMemoryExample = `# Agente SIN memoria - Cada interacci√≥n es aislada

def simple_agent_without_memory(user_input):
    # Solo ve el input actual, no recuerda nada
    prompt = f"""
    Eres un asistente √∫til.
    Usuario: {user_input}
    Asistente:
    """
    
    response = llm.complete(prompt)
    return response

# Problema: Conversaciones fragmentadas
user1 = "Mi nombre es Ana y trabajo en marketing"
agent_response1 = simple_agent_without_memory(user1)
# ‚Üí "Hola! ¬øEn qu√© puedo ayudarte?"

user2 = "¬øQu√© opinas de mi trabajo?"
agent_response2 = simple_agent_without_memory(user2)
# ‚Üí "No s√© cu√°l es tu trabajo. ¬øPodr√≠as contarme m√°s?"

# üòû El agente ya olvid√≥ que Ana trabaja en marketing!`;

  const withMemoryExample = `# Agente CON memoria - Mantiene contexto

class MemoryAwareAgent:
    def __init__(self):
        self.conversation_history = []
        self.user_profile = {}
        self.session_context = {}
    
    def process_message(self, user_input):
        # 1. Recuperar contexto relevante
        relevant_context = self.retrieve_relevant_context(user_input)
        
        # 2. Construir prompt con memoria
        prompt = self.build_contextual_prompt(
            user_input, 
            relevant_context,
            self.conversation_history[-5:]  # √öltimos 5 mensajes
        )
        
        # 3. Generar respuesta
        response = llm.complete(prompt)
        
        # 4. Actualizar memoria
        self.update_memory(user_input, response)
        
        return response
    
    def update_memory(self, user_input, response):
        # Guardar en historial de conversaci√≥n
        self.conversation_history.append({
            "user": user_input,
            "assistant": response,
            "timestamp": datetime.now()
        })
        
        # Extraer y actualizar informaci√≥n del usuario
        user_info = self.extract_user_info(user_input)
        self.user_profile.update(user_info)
        
        # Actualizar contexto de sesi√≥n
        self.session_context.update({
            "last_topic": self.extract_topic(user_input),
            "mood": self.detect_mood(user_input),
            "preferences": self.extract_preferences(user_input)
        })

# Ahora s√≠ mantiene contexto!
agent = MemoryAwareAgent()

response1 = agent.process_message("Mi nombre es Ana y trabajo en marketing")
# ‚Üí "¬°Hola Ana! Es un placer conocerte. El marketing es un campo fascinante..."

response2 = agent.process_message("¬øQu√© opinas de mi trabajo?")
# ‚Üí "Ana, el marketing es una disciplina muy din√°mica y creativa..."

# üéâ ¬°El agente recuerda que Ana trabaja en marketing!`;

  const memoryTypesCode = `# Tipos de Memoria en Agentes IA

class AgentMemorySystem:
    def __init__(self):
        # 1. MEMORIA DE TRABAJO (Working Memory)
        # Informaci√≥n inmediatamente relevante para la tarea actual
        self.working_memory = {
            "current_task": None,
            "active_variables": {},
            "temp_calculations": {},
            "intermediate_results": []
        }
        
        # 2. MEMORIA DE CORTO PLAZO (Short-term Memory)
        # Conversaci√≥n actual, contexto de sesi√≥n
        self.short_term_memory = {
            "conversation_history": [],  # √öltimos N mensajes
            "session_context": {},       # Estado de la sesi√≥n actual
            "recent_entities": set(),    # Entidades mencionadas recientemente
            "current_goals": []          # Objetivos de la conversaci√≥n actual
        }
        
        # 3. MEMORIA DE LARGO PLAZO (Long-term Memory)
        # Informaci√≥n persistente entre sesiones
        self.long_term_memory = {
            "user_profile": {},          # Informaci√≥n personal del usuario
            "preferences": {},           # Preferencias conocidas
            "past_interactions": [],     # Res√∫menes de conversaciones pasadas
            "learned_facts": {},         # Hechos aprendidos sobre el usuario/dominio
            "relationship_graph": {}     # Relaciones entre conceptos/personas
        }
        
        # 4. MEMORIA EPIS√ìDICA (Episodic Memory)
        # Eventos espec√≠ficos y sus contextos
        self.episodic_memory = {
            "important_events": [],      # Eventos marcados como importantes
            "emotional_moments": [],     # Momentos con carga emocional
            "successful_solutions": [],  # Soluciones que funcionaron bien
            "failed_attempts": []        # Intentos que no funcionaron
        }
        
        # 5. MEMORIA SEM√ÅNTICA (Semantic Memory)
        # Conocimiento general y conceptual
        self.semantic_memory = {
            "domain_knowledge": {},      # Conocimiento del dominio
            "procedures": {},            # C√≥mo hacer tareas espec√≠ficas
            "relationships": {},         # Relaciones entre conceptos
            "patterns": {}               # Patrones reconocidos
        }

    def store_memory(self, memory_type, key, value, metadata=None):
        """Almacenar informaci√≥n en el tipo de memoria apropiado"""
        memory_store = getattr(self, f"{memory_type}_memory")
        
        if isinstance(memory_store, dict):
            memory_store[key] = {
                "value": value,
                "timestamp": datetime.now(),
                "metadata": metadata or {},
                "access_count": 0
            }
    
    def retrieve_memory(self, memory_type, key=None, query=None):
        """Recuperar informaci√≥n de la memoria"""
        memory_store = getattr(self, f"{memory_type}_memory")
        
        if key:
            # B√∫squeda directa por clave
            item = memory_store.get(key)
            if item:
                item["access_count"] += 1  # Tracking de acceso
                return item["value"]
        
        return None`;

  return (
    <div className="lesson" role="main" aria-labelledby="lesson-title">
      <h2 id="lesson-title" tabIndex="-1">
        üß† ¬øPor qu√© Memoria en Agentes?
      </h2>
      
      <div className="lesson-section">
        <h3>El Problema de los Agentes sin Memoria</h3>
        <p>
          Los agentes b√°sicos procesan cada interacci√≥n de forma aislada, como si fuera 
          la primera vez que interact√∫an con el usuario. Esto crea experiencias fragmentadas 
          y frustrantes.
        </p>
        
        <MemoryComparison />
      </div>

      <div className="lesson-section">
        <h3>üîÑ Comparaci√≥n de C√≥digo: Sin vs Con Memoria</h3>
        
        <div className="code-comparison">
          <div className="code-example">
            <h4>‚ùå Agente Sin Memoria</h4>
            <CodeBlock 
              language="python"
              title="simple_agent.py"
              code={withoutMemoryExample}
            />
          </div>
          
          <div className="code-example">
            <h4>‚úÖ Agente Con Memoria</h4>
            <CodeBlock 
              language="python"
              title="memory_aware_agent.py"
              code={withMemoryExample}
            />
          </div>
        </div>
      </div>

      <div className="lesson-section">
        <h3>üéØ Caso de Uso Real: Asistente de Atenci√≥n al Cliente</h3>
        <p>
          Imaginemos un asistente de atenci√≥n al cliente que debe recordar informaci√≥n 
          del cliente a lo largo de m√∫ltiples interacciones. Veamos c√≥mo la memoria 
          transforma completamente la experiencia:
        </p>

        <RealWorldExample />
        <ImpactMetrics />
      </div>

      <div className="lesson-section">
        <h3>üß† Tipos de Memoria en Agentes</h3>
        <p>
          Los agentes inteligentes implementan diferentes tipos de memoria, cada uno 
          optimizado para diferentes aspectos del procesamiento de informaci√≥n:
        </p>
        
        <CodeBlock 
          language="python"
          title="memory_types.py"
          code={memoryTypesCode}
        />

        <div className="memory-types-overview">
          <div className="memory-type-card">
            <h4>üîÑ Memoria de Trabajo</h4>
            <p>Informaci√≥n temporalmente activa para la tarea actual</p>
            <ul>
              <li>Variables de la conversaci√≥n en curso</li>
              <li>C√°lculos intermedios</li>
              <li>Estado actual de la tarea</li>
            </ul>
          </div>
          
          <div className="memory-type-card">
            <h4>‚è±Ô∏è Memoria de Corto Plazo</h4>
            <p>Contexto de la sesi√≥n actual y conversaci√≥n reciente</p>
            <ul>
              <li>√öltimos mensajes de la conversaci√≥n</li>
              <li>Entidades mencionadas recientemente</li>
              <li>Objetivos actuales del usuario</li>
            </ul>
          </div>
          
          <div className="memory-type-card">
            <h4>üíæ Memoria de Largo Plazo</h4>
            <p>Informaci√≥n persistente entre sesiones</p>
            <ul>
              <li>Perfil del usuario</li>
              <li>Preferencias conocidas</li>
              <li>Historial de interacciones</li>
            </ul>
          </div>
          
          <div className="memory-type-card">
            <h4>üìö Memoria Epis√≥dica</h4>
            <p>Eventos espec√≠ficos y sus contextos</p>
            <ul>
              <li>Momentos importantes</li>
              <li>Soluciones exitosas</li>
              <li>Situaciones problem√°ticas</li>
            </ul>
          </div>
          
          <div className="memory-type-card">
            <h4>üéØ Memoria Sem√°ntica</h4>
            <p>Conocimiento general y conceptual</p>
            <ul>
              <li>Conocimiento del dominio</li>
              <li>Procedimientos aprendidos</li>
              <li>Patrones reconocidos</li>
            </ul>
          </div>
        </div>
      </div>

      <div className="lesson-section">
        <h3>üéØ Beneficios de la Memoria en Agentes</h3>
        <div className="benefits-grid">
          <div className="benefit-card">
            <h4>üìà Personalizaci√≥n</h4>
            <p>El agente adapta su comportamiento bas√°ndose en preferencias y historial del usuario</p>
          </div>
          
          <div className="benefit-card">
            <h4>‚ö° Eficiencia</h4>
            <p>Evita repetir informaci√≥n ya conocida, acelera la resoluci√≥n de problemas</p>
          </div>
          
          <div className="benefit-card">
            <h4>ü§ù Construcci√≥n de Relaciones</h4>
            <p>Permite desarrollar rapport y comprensi√≥n m√°s profunda del usuario</p>
          </div>
          
          <div className="benefit-card">
            <h4>üéØ Relevancia Contextual</h4>
            <p>Respuestas m√°s relevantes basadas en el contexto completo de la interacci√≥n</p>
          </div>
          
          <div className="benefit-card">
            <h4>üìä Aprendizaje Continuo</h4>
            <p>El agente mejora con cada interacci√≥n, volvi√©ndose m√°s efectivo</p>
          </div>
          
          <div className="benefit-card">
            <h4>üîÑ Continuidad</h4>
            <p>Conversaciones fluidas que se extienden a trav√©s de m√∫ltiples sesiones</p>
          </div>
        </div>
      </div>

      <div className="lesson-section">
        <h3>üéØ Pr√≥ximos Pasos</h3>
        <p>
          En las siguientes lecciones exploraremos c√≥mo implementar cada tipo de memoria:
        </p>
        
        <div className="next-lessons-preview">
          <div className="lesson-preview">
            <h4>Lecci√≥n 2: Memoria de Corto Plazo</h4>
            <p>Implementaci√≥n de memoria conversacional y gesti√≥n de sesiones</p>
          </div>
          
          <div className="lesson-preview">
            <h4>Lecci√≥n 3: Memoria de Largo Plazo</h4>
            <p>Persistencia de datos y b√∫squeda vectorial para memoria extendida</p>
          </div>
          
          <div className="lesson-preview">
            <h4>Lecci√≥n 4: Res√∫menes Inteligentes</h4>
            <p>Compresi√≥n y s√≠ntesis autom√°tica de informaci√≥n</p>
          </div>
        </div>
      </div>

      <div className="lesson-actions">
        <button 
          className="btn btn-primary"
          onClick={onComplete}
          aria-label="Marcar lecci√≥n como completada y continuar"
        >
          Fundamentos Claros ‚úì
        </button>
      </div>
    </div>
  );
};

MemoryIntroLesson.propTypes = {
  onComplete: PropTypes.func.isRequired,
};

export default MemoryIntroLesson;
